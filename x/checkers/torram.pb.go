// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alice/checkers/v1/torram.proto

package checkers

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateGame defines the Msg/CreateGame request type.
type ReqCheckersTorram struct {
	// creator is the message sender.
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index       string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Black       string `protobuf:"bytes,3,opt,name=black,proto3" json:"black,omitempty"`
	Red         string `protobuf:"bytes,4,opt,name=red,proto3" json:"red,omitempty"`
	StartTime   string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *ReqCheckersTorram) Reset()         { *m = ReqCheckersTorram{} }
func (m *ReqCheckersTorram) String() string { return proto.CompactTextString(m) }
func (*ReqCheckersTorram) ProtoMessage()    {}
func (*ReqCheckersTorram) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f938a46912d0f09, []int{0}
}
func (m *ReqCheckersTorram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCheckersTorram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCheckersTorram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCheckersTorram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCheckersTorram.Merge(m, src)
}
func (m *ReqCheckersTorram) XXX_Size() int {
	return m.Size()
}
func (m *ReqCheckersTorram) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCheckersTorram.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCheckersTorram proto.InternalMessageInfo

func (m *ReqCheckersTorram) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ReqCheckersTorram) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ReqCheckersTorram) GetBlack() string {
	if m != nil {
		return m.Black
	}
	return ""
}

func (m *ReqCheckersTorram) GetRed() string {
	if m != nil {
		return m.Red
	}
	return ""
}

func (m *ReqCheckersTorram) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *ReqCheckersTorram) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *ReqCheckersTorram) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// MsgCreateGameResponse defines the Msg/CreateGame response type.
type ResCheckersTorram struct {
}

func (m *ResCheckersTorram) Reset()         { *m = ResCheckersTorram{} }
func (m *ResCheckersTorram) String() string { return proto.CompactTextString(m) }
func (*ResCheckersTorram) ProtoMessage()    {}
func (*ResCheckersTorram) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f938a46912d0f09, []int{1}
}
func (m *ResCheckersTorram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCheckersTorram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCheckersTorram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCheckersTorram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCheckersTorram.Merge(m, src)
}
func (m *ResCheckersTorram) XXX_Size() int {
	return m.Size()
}
func (m *ResCheckersTorram) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCheckersTorram.DiscardUnknown(m)
}

var xxx_messageInfo_ResCheckersTorram proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ReqCheckersTorram)(nil), "alice.checkers.v1.ReqCheckersTorram")
	proto.RegisterType((*ResCheckersTorram)(nil), "alice.checkers.v1.ResCheckersTorram")
}

func init() { proto.RegisterFile("alice/checkers/v1/torram.proto", fileDescriptor_1f938a46912d0f09) }

var fileDescriptor_1f938a46912d0f09 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x31, 0x4f, 0xc2, 0x40,
	0x1c, 0xc5, 0x29, 0x58, 0x90, 0xd3, 0x18, 0x39, 0x49, 0x3c, 0x9a, 0xd8, 0x10, 0xe2, 0x60, 0x48,
	0x6c, 0x83, 0x6c, 0x6e, 0xc2, 0xe0, 0x8e, 0x4c, 0x0e, 0x92, 0x72, 0xbd, 0x94, 0x0b, 0x5c, 0x0f,
	0xef, 0x4e, 0x74, 0x34, 0x6e, 0x6e, 0x7e, 0x14, 0x06, 0x3f, 0x84, 0x23, 0x71, 0x72, 0x34, 0x30,
	0xf0, 0x35, 0x4c, 0xef, 0x68, 0x22, 0x60, 0xe2, 0x76, 0xff, 0xf7, 0x7e, 0xed, 0x6b, 0xdf, 0xff,
	0x80, 0x1b, 0x8c, 0x28, 0x26, 0x3e, 0x1e, 0x10, 0x3c, 0x24, 0x42, 0xfa, 0x93, 0x86, 0xaf, 0xb8,
	0x10, 0x01, 0xf3, 0xc6, 0x82, 0x2b, 0x0e, 0x4b, 0xda, 0xf7, 0x52, 0xdf, 0x9b, 0x34, 0x9c, 0x63,
	0xcc, 0x25, 0xe3, 0xd2, 0x67, 0x32, 0x4a, 0x70, 0x26, 0x23, 0xc3, 0x3a, 0xe5, 0x88, 0x47, 0x5c,
	0x1f, 0xfd, 0xe4, 0xb4, 0x52, 0x2b, 0x06, 0xef, 0x19, 0xc3, 0x0c, 0xc6, 0xaa, 0xbd, 0x66, 0x41,
	0xa9, 0x43, 0xee, 0xdb, 0xab, 0x97, 0x77, 0x75, 0x30, 0x44, 0xa0, 0x80, 0x05, 0x09, 0x14, 0x17,
	0xc8, 0xaa, 0x5a, 0x67, 0xc5, 0x4e, 0x3a, 0xc2, 0x32, 0xb0, 0x69, 0x1c, 0x92, 0x27, 0x94, 0xd5,
	0xba, 0x19, 0xa0, 0x07, 0xec, 0xfe, 0x28, 0xc0, 0x43, 0x94, 0x4b, 0xd4, 0x16, 0xfa, 0x7c, 0x3f,
	0x2f, 0xaf, 0x62, 0xae, 0xc2, 0x50, 0x10, 0x29, 0x6f, 0x94, 0xa0, 0x71, 0xd4, 0x31, 0x18, 0xac,
	0x83, 0x9c, 0x20, 0x21, 0xda, 0xf9, 0x87, 0x4e, 0x20, 0x78, 0x02, 0x80, 0x54, 0x81, 0x50, 0x3d,
	0x45, 0x19, 0x41, 0xb6, 0x8e, 0x2d, 0x6a, 0xa5, 0x4b, 0x19, 0x81, 0x15, 0xb0, 0x4b, 0xe2, 0xd0,
	0x98, 0x79, 0xf3, 0xad, 0x24, 0x0e, 0xb5, 0x55, 0x05, 0x7b, 0x21, 0x91, 0x58, 0xd0, 0xb1, 0xa2,
	0x3c, 0x46, 0x05, 0xed, 0xfe, 0x96, 0x2e, 0xf7, 0x5f, 0x96, 0xd3, 0x7a, 0xfa, 0x6f, 0xb5, 0xa3,
	0xa4, 0x0a, 0xb9, 0x5e, 0xc5, 0xc5, 0x23, 0x38, 0xd8, 0x28, 0xe7, 0x0e, 0x1c, 0xa6, 0x4a, 0x3b,
	0x79, 0x92, 0x5c, 0x33, 0x78, 0xea, 0x6d, 0x2d, 0xc9, 0xdb, 0xaa, 0xd5, 0xf9, 0x9b, 0xda, 0x48,
	0x74, 0xec, 0xe7, 0xe5, 0xb4, 0x6e, 0xb5, 0x9a, 0x1f, 0x73, 0xd7, 0x9a, 0xcd, 0x5d, 0xeb, 0x7b,
	0xee, 0x5a, 0x6f, 0x0b, 0x37, 0x33, 0x5b, 0xb8, 0x99, 0xaf, 0x85, 0x9b, 0xb9, 0xad, 0x44, 0x54,
	0x0d, 0x1e, 0xfa, 0x1e, 0xe6, 0xcc, 0x5f, 0xbf, 0x3b, 0xfd, 0xbc, 0xde, 0x6a, 0xf3, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x1b, 0xbe, 0x38, 0xaf, 0x54, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CheckersTorramClient is the client API for CheckersTorram service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckersTorramClient interface {
	CheckersCreateGm(ctx context.Context, in *ReqCheckersTorram, opts ...grpc.CallOption) (*ResCheckersTorram, error)
}

type checkersTorramClient struct {
	cc grpc1.ClientConn
}

func NewCheckersTorramClient(cc grpc1.ClientConn) CheckersTorramClient {
	return &checkersTorramClient{cc}
}

func (c *checkersTorramClient) CheckersCreateGm(ctx context.Context, in *ReqCheckersTorram, opts ...grpc.CallOption) (*ResCheckersTorram, error) {
	out := new(ResCheckersTorram)
	err := c.cc.Invoke(ctx, "/alice.checkers.v1.CheckersTorram/CheckersCreateGm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckersTorramServer is the server API for CheckersTorram service.
type CheckersTorramServer interface {
	CheckersCreateGm(context.Context, *ReqCheckersTorram) (*ResCheckersTorram, error)
}

// UnimplementedCheckersTorramServer can be embedded to have forward compatible implementations.
type UnimplementedCheckersTorramServer struct {
}

func (*UnimplementedCheckersTorramServer) CheckersCreateGm(ctx context.Context, req *ReqCheckersTorram) (*ResCheckersTorram, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckersCreateGm not implemented")
}

func RegisterCheckersTorramServer(s grpc1.Server, srv CheckersTorramServer) {
	s.RegisterService(&_CheckersTorram_serviceDesc, srv)
}

func _CheckersTorram_CheckersCreateGm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckersTorram)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckersTorramServer).CheckersCreateGm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alice.checkers.v1.CheckersTorram/CheckersCreateGm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckersTorramServer).CheckersCreateGm(ctx, req.(*ReqCheckersTorram))
	}
	return interceptor(ctx, in, info, handler)
}

var CheckersTorram_serviceDesc = _CheckersTorram_serviceDesc
var _CheckersTorram_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alice.checkers.v1.CheckersTorram",
	HandlerType: (*CheckersTorramServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckersCreateGm",
			Handler:    _CheckersTorram_CheckersCreateGm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alice/checkers/v1/torram.proto",
}

func (m *ReqCheckersTorram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCheckersTorram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCheckersTorram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTorram(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintTorram(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintTorram(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Red) > 0 {
		i -= len(m.Red)
		copy(dAtA[i:], m.Red)
		i = encodeVarintTorram(dAtA, i, uint64(len(m.Red)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Black) > 0 {
		i -= len(m.Black)
		copy(dAtA[i:], m.Black)
		i = encodeVarintTorram(dAtA, i, uint64(len(m.Black)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTorram(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTorram(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResCheckersTorram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCheckersTorram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCheckersTorram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTorram(dAtA []byte, offset int, v uint64) int {
	offset -= sovTorram(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReqCheckersTorram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTorram(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTorram(uint64(l))
	}
	l = len(m.Black)
	if l > 0 {
		n += 1 + l + sovTorram(uint64(l))
	}
	l = len(m.Red)
	if l > 0 {
		n += 1 + l + sovTorram(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovTorram(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovTorram(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTorram(uint64(l))
	}
	return n
}

func (m *ResCheckersTorram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTorram(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTorram(x uint64) (n int) {
	return sovTorram(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqCheckersTorram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTorram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCheckersTorram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCheckersTorram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTorram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTorram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTorram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTorram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Black", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTorram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTorram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Black = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Red", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTorram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTorram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Red = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTorram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTorram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTorram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTorram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTorram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTorram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTorram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTorram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCheckersTorram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTorram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCheckersTorram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCheckersTorram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTorram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTorram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTorram(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTorram
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTorram
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTorram
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTorram
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTorram
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTorram
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTorram        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTorram          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTorram = fmt.Errorf("proto: unexpected end of group")
)
